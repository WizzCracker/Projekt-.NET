@{
    ViewData["Title"] = "Map";
}

<h2>Interactive Drone Map</h2>

<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<style>
    #map {
        height: 600px;
        width: 100%;
        z-index: 1;
        position: relative;
    }
    #loadingOverlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(255, 255, 255, 0.8);
    z-index: 9999;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    font-size: 18px;
    font-family: sans-serif;
}

    .spinner {
    border: 6px solid #f3f3f3;
    border-top: 6px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin-bottom: 10px;
}

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

</style>

<div id="loadingOverlay">
    <div class="spinner"></div>
    <p>Loading map data...</p>
</div>

<div id="map"></div>

<script src="~/js/map-config.js"></script>

<script>
    const openWeatherApiKey = '@ViewBag.OpenWeatherApiKey';
</script>

<script>
    let isLoading = true;

    const droneMarkers = [];

    window.onload = async function () {

        const map = L.map('map', {
            maxBounds: [
                [48.5, 14.0],   
                [55.5, 24.2]    
            ],
            maxBoundsViscosity: 1.0
        }).setView([52.237, 21.017], 6);
        map.setMinZoom(6);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        await Promise.all([
            DrawDistricts(0, map),
            DrawDrones(0, map)
        ]);


        document.getElementById('loadingOverlay').style.display = 'none';
    }

    

    async function DrawDrones(load = 1, map) {
        if (load === 1) { document.getElementById('loadingOverlay').style.display = 'flex'; }
        droneMarkers.forEach(m => map.removeLayer(m));
        droneMarkers.length = 0;
        return fetch('/Map/GetDroneData')
            .then(res => res.json())
            .then(data => {
                data.markers.forEach(marker => {
                    const icon = marker.isGrounded ? groundedDroneIcon : droneIcon;
                    marker.popup += `<button onclick="moveDrone(${marker.droneId}, this)">Move</button>`
                    const droneMarker = L.marker([marker.lat, marker.lng], {
                        icon: icon
                    }).addTo(map)
                        .bindPopup(marker.popup, { closeOnClick: false });
                    droneMarker.droneId = marker.droneId;
                    droneMarker.originalPopup = marker.popup;
                    droneMarkers.push(droneMarker);
                });
            });
        if (load === 1) {
            document.getElementById('loadingOverlay').style.display = 'none'
        }
    }

    function stringToColor(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        const color = '#' + ((hash >> 24 & 0xFF).toString(16) +
            (hash >> 16 & 0xFF).toString(16) +
            (hash >> 8 & 0xFF).toString(16)).padEnd(6, '0');
        return color.slice(0, 7);
    }


    async function DrawDistricts(load = 1, map) {
        if (load === 1) { document.getElementById('loadingOverlay').style.display = 'flex'; }
        return fetch('/Map/GetDistrictData')
            .then(res => res.json())
            .then(data => {
                data.forEach(district => {
                    const polygon = L.polygon(district.boundaries, {
                        color: stringToColor(district.name),
                        fillColor: stringToColor(district.name),
                        fillOpacity: 0.1,
                        weight: 2
                    }).addTo(map);

                    polygon.bindPopup(`<strong>District:</strong> ${district.name}`);
                });
            });
        if (load === 1) {
            document.getElementById('loadingOverlay').style.display = 'none'
        }
    }

    function showMoveForm(droneId) {
        const marker = findMarkerByDroneId(droneId);
        if (!marker) return;

        const popup = marker.getPopup();
        if (!popup) return;

        const container = document.createElement('div');
        container.innerHTML = `
        <form onsubmit="submitMove(event, ${droneId})" onclick="event.stopPropagation()" onmousedown="event.stopPropagation()">
            <label>Lat: <input type="number" step="any" name="lat" required></label><br>
            <label>Lng: <input type="number" step="any" name="lng" required></label><br>
            <button type="submit">Submit</button>
            <button type="button" onclick="restorePopup(${droneId})">Cancel</button>
        </form>
    `;

        popup.setContent(container);
        marker.openPopup();

        L.DomEvent.disableClickPropagation(container);
        L.DomEvent.disableScrollPropagation(container);
    }

    function moveDrone(droneId){
        const marker = findMarkerByDroneId(droneId);
        showMoveForm(droneId);
        marker.openPopup();
    }

    function findMarkerByDroneId(id) {
        return droneMarkers.find(m => m.droneId == id);
    }

    function restorePopup(droneId) {
        const marker = findMarkerByDroneId(droneId);
        marker.closePopup();
        if (!marker || !marker.originalPopup) return;

        marker.bindPopup(marker.originalPopup, { closeOnClick: false });
    }


    function submitMove(event, droneId) {
        event.preventDefault();

        const form = event.target;
        const lat = form.lat.value;
        const lng = form.lng.value;

        fetch(`/Map/Move?droneId=${droneId}&latitude=${lat}&longitude=${lng}`, {
            method: 'POST'
        })
            .then(restorePopup(droneId))
            .then(response => {
                if (response.ok) {
                    alert("Drone move sent.");
                } else {
                    alert("Failed to move drone.");
                }
            });
    }


    
    
</script>

