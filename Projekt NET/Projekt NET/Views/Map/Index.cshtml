@{
    ViewData["Title"] = "Map";
}


<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<style>

    #map-container {
        display: flex;
        width: 100%;
    }

    #map {
        height: 600px;
        width: 75%;
        z-index: 1;
        position: relative;
    }

    #sidebar {
        width: 25%;
        padding: 20px;
        box-sizing: border-box;
        background-color: #e8f5e9;
        border-left: 1px solid #eee;
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    #infoBox {
        position: absolute;
        top: 100px; 
        left: 20px; 
        width: 250px; 
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        z-index: 1000; 
        display: none; 
        flex-direction: column; 
        max-height: 500px; 
        overflow-y: auto;
    }

        #infoBox.show {
            display: flex;
        }

    #infoBoxHeader {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
        padding-bottom: 5px;
        border-bottom: 1px solid #eee;
    }

    #infoBoxTitle {
        font-weight: bold;
        font-size: 1.1em;
    }

    #closeInfoBox {
        background: none;
        border: none;
        font-size: 1.2em;
        cursor: pointer;
        color: #888;
        padding: 0 5px;
    }

        #closeInfoBox:hover {
            color: #333;
        }

    #infoBoxContent {
        font-size: 0.9em;
        line-height: 1.4;
        color: #555;
    }



    #loadingOverlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        z-index: 9999;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        font-size: 18px;
        font-family: sans-serif;
    }

    .spinner {
        border: 6px solid #f3f3f3;
        border-top: 6px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-bottom: 10px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .dropdown {
        position: relative;
        display: inline-block;
        width: 100%;
    }

    .dropdown-button {
        background-color: #4CAF50;
        color: white;
        padding: 12px;
        font-size: 16px;
        border: none;
        cursor: pointer;
        width: 100%;
        text-align: left;
        border-radius: 4px;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #e5ccff;
        min-width: 300px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1000;
        border-radius: 4px;
        padding: 10px;
        right: 0;
        top: 100%;
    }

        .dropdown-content.show {
            display: block;
        }

    #gemini-chatbox {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        background-color: white;
        display: flex;
        flex-direction: column;
        height: 400px;
        overflow: hidden;
    }

    #chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding-right: 5px;
        margin-bottom: 10px;
    }

    .chat-message {
        margin-bottom: 8px;
        padding: 8px 12px;
        border-radius: 15px;
        max-width: 80%;
        word-wrap: break-word;
    }

    .user-message {
        background-color: #e0f7fa;
        align-self: flex-end;
        margin-left: auto;
    }

    .gemini-message {
        background-color: #f1f8e9;
        align-self: flex-start;
        margin-right: auto;
    }

    #chat-input-container {
        display: flex;
        border-top: 1px solid #eee;
        padding-top: 10px;
    }

    #chat-input {
        flex-grow: 1;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-right: 5px;
    }

    #send-button {
        background-color: #007bff;
        color: white;
        padding: 8px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        #send-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

    #cmdWindow {
        display: none;
        position: fixed;
        top: 10%;
        left: 50%;
        transform: translateX(-50%);
        width: 600px;
        height: 400px;
        background-color: #111;
        color: #0f0;
        font-family: monospace;
        padding: 20px;
        box-shadow: 0 0 20px #0f0;
        z-index: 9999;
        border-radius: 8px;
        overflow-y: auto;
    }

    #cmdClose {
        position: absolute;
        top: 8px;
        right: 12px;
        color: #f00;
        cursor: pointer;
        font-weight: bold;
        font-size: 20px;
    }

    .line {
        margin: 4px 0;
    }

</style>

<h2>Interactive Drone Map</h2>

<div id="map-container">
    <div id="loadingOverlay">
        <div class="spinner"></div>
        <p>Loading map data...</p>
    </div>

    <div id="infoBox">
        <div id="infoBoxHeader">
            <span id="infoBoxTitle">Flight Data:</span>
            <button id="closeInfoBox">X</button>
        </div>
        <div id="infoBoxContent">
            <p>Loading details...</p>
        </div>
    </div>
    <div id="map"></div>

    <div id="sidebar">
        <div class="dropdown">
            <button class="dropdown-button" id="customerServiceButton">Customer Service</button>
            <div class="dropdown-content" id="customerServiceDropdown">
                <div id="gemini-chatbox">
                    <div id="chat-messages">
                        <div class="chat-message gemini-message">Hello! How can I assist you with the drone map today?</div>
                    </div>
                    <div id="chat-input-container">
                        <input type="text" id="chat-input" placeholder="Type your message..." />
                        <button id="send-button">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div id="cmdWindow">
    <div id="cmdClose" onclick="closeCmdWindow()">✖</div>
    <div id="cmdOutput"></div>
</div>

<script src="~/js/map-config.js"></script>

<script>
    const openWeatherApiKey = '@ViewBag.OpenWeatherApiKey';
</script>

<script>
    let isLoading = true;

    const droneMarkers = [];
    const animationControllers = {};

    let animArray = [];

    window.onload = async function () {

        const map = L.map('map', {
            maxBounds: [
                [48.5, 14.0],   
                [55.5, 24.2]    
            ],
            maxBoundsViscosity: 1.0
        }).setView([52.237, 21.017], 6);
        map.setMinZoom(6);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        await Promise.all([
            DrawDistricts(0, map),
            DrawDrones(0, map)
        ]);

        animArray = droneMarkers.filter(drone => drone.status === "Busy");

        await animArray.forEach(droneMarker => {
            fetch(`/Map/getFlightData?droneId=${encodeURIComponent(droneMarker.droneId)}`)
                .then(response => {
                    if (!response.ok && response.status != 404) {
                        console.log(response)
                        throw new Error("Invalid flight data response");
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data || !data.coordinates) {
                        return;
                    }
                    console.log(data.steps);
                    animateMarkerSmooth(
                        droneMarker,
                        data.coordinates.latitude,
                        data.coordinates.longitude,
                        data.steps
                    );
                })
                .catch(err => {
                    console.error("Flight fetch failed:", err);
                });
        });

        document.getElementById('loadingOverlay').style.display = 'none';
    }

    

    async function DrawDrones(load = 1, map) {
        if (load === 1) { document.getElementById('loadingOverlay').style.display = 'flex'; }
        droneMarkers.forEach(m => map.removeLayer(m));
        droneMarkers.length = 0;
        return fetch('/Map/GetDroneData')
            .then(res => res.json())
            .then(data => {
                data.markers.forEach(marker => {
                    const icon = marker.isGrounded ? groundedDroneIcon : droneIcon;
                    marker.popup += `<button onclick="moveDrone(${marker.droneId}, this)">Move</button><button onclick="stopDrone(${marker.droneId})">Stop</button><button onclick="fetchAndDisplayFlightLog(${marker.droneId})">Show Flight Log</button><br><button onclick="runDiagnostic(${marker.droneId})">Run Drone Diagnostic</button>`;

                    const droneMarker = L.marker([marker.lat, marker.lng], {
                        icon: icon
                    }).addTo(map)
                        .bindPopup(marker.popup, { closeOnClick: false });
                    droneMarker.isGrounded = marker.isGrounded;
                    droneMarker.droneId = marker.droneId;
                    droneMarker.status = marker.status;
                    droneMarker.originalPopup = marker.popup;
                    droneMarkers.push(droneMarker);
                });
            });
        if (load === 1) {
            document.getElementById('loadingOverlay').style.display = 'none'
        }
    }

    function stringToColor(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        const color = '#' + ((hash >> 24 & 0xFF).toString(16) +
            (hash >> 16 & 0xFF).toString(16) +
            (hash >> 8 & 0xFF).toString(16)).padEnd(6, '0');
        return color.slice(0, 7);
    }


    async function DrawDistricts(load = 1, map) {
        if (load === 1) { document.getElementById('loadingOverlay').style.display = 'flex'; }
        return fetch('/Map/GetDistrictData')
            .then(res => res.json())
            .then(data => {
                data.forEach(district => {
                    const polygon = L.polygon(district.boundaries, {
                        color: stringToColor(district.name),
                        fillColor: stringToColor(district.name),
                        fillOpacity: 0.1,
                        weight: 2
                    }).addTo(map);

                    polygon.bindPopup(`<strong>District:</strong> ${district.name}`);
                });
            });
        if (load === 1) {
            document.getElementById('loadingOverlay').style.display = 'none'
        }
    }

    function showMoveForm(droneId) {
        const marker = findMarkerByDroneId(droneId);
        if (!marker) return;

        const popup = marker.getPopup();
        if (!popup) return;

        const container = document.createElement('div');
        container.innerHTML = `
        <form onsubmit="submitMove(event, ${droneId})" onclick="event.stopPropagation()" onmousedown="event.stopPropagation()">
            <label>Lat: <input type="number" step="any" name="lat" required></label><br>
            <label>Lng: <input type="number" step="any" name="lng" required></label><br>
            <button type="submit">Submit</button>
            <button type="button" onclick="restorePopup(${droneId})">Cancel</button>
        </form>
    `;

        popup.setContent(container);
        marker.openPopup();

        L.DomEvent.disableClickPropagation(container);
        L.DomEvent.disableScrollPropagation(container);
    }

    function moveDrone(droneId){
        const marker = findMarkerByDroneId(droneId);
        if (marker.status != 'Active') {
            alert("Drone cannot move. Reason: " + marker.status);
            return; 
        }
        console.log(marker.isGrounded);
        if (marker.isGrounded) { alert("Drone cannot move. Reason: Grounded"); return; }
        showMoveForm(droneId);
        marker.openPopup();
    }

    function findMarkerByDroneId(id) {
        return droneMarkers.find(m => m.droneId == id);
    }

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function restorePopup(droneId) {
        const marker = findMarkerByDroneId(droneId);
        marker.closePopup();
        await sleep(500);
        fetch(`/Map/GetSingleDroneData?droneId=${encodeURIComponent(droneId)}`)
            .then(res => res.json())
            .then(drone => {
                if (drone.status !== "Inactive" && !drone.isGrounded) {
                    drone.popup += `<button onclick="moveDrone(${marker.droneId}, this)">Move</button>`;
                    drone.popup += `<button onclick="stopDrone(${marker.droneId})">Stop</button>`;
                    drone.popup += `<button onclick="fetchAndDisplayFlightLog(${marker.droneId})" > Show Flight Log < /button>`;
                    drone.popup += `<br><button onclick="runDiagnostic(${marker.droneId})">Run Drone Diagnostic</button>`
                }
                marker.bindPopup(drone.popup, { closeOnClick: false });
    });

    }


    async function submitMove(event, droneId) {
        event.preventDefault();

        const form = event.target;
        const lat = form.lat.value;
        const lng = form.lng.value;

        fetch(`/Map/Move?droneId=${droneId}&latitude=${lat}&longitude=${lng}`, {
        method: 'POST'
        })
            .then(response => {
                if (response.ok) {
                    alert("Drone move sent.");
                    return restorePopup(droneId);
                } else {
                    alert("Failed to move drone.");
                }
            });


        console.log(droneId)
        setTimeout(() => {
            fetch(`/Map/getFlightData?droneId=${encodeURIComponent(droneId)} `)
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Invalid flight data response");
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data || !data.coordinates) {
                        console.error("Missing flight data or coordinates");
                        return;
                    }
                    console.log(data);
                    droneMarker = findMarkerByDroneId(droneId);
                    animateMarkerSmooth(
                        droneMarker,
                        data.coordinates.latitude,
                        data.coordinates.longitude,
                        data.steps
                    );
                })
                .catch(err => {
                    console.error("Flight fetch failed:", err);
                });
        }, 1000)
        
        
        
    }

        function animateMarkerSmooth(marker, destLat, destLng, steps) {
        const duration = steps * 1000;
        const startLatLng = marker.getLatLng();
        const startTime = performance.now();

        
        if (animationControllers[marker.droneId]) {
            cancelAnimationFrame(animationControllers[marker.droneId]);
        }

        function animate(currentTime) {
            const elapsed = currentTime - startTime;
            const t = Math.min(elapsed / duration, 1);

            const newLat = startLatLng.lat + t * (destLat - startLatLng.lat);
            const newLng = startLatLng.lng + t * (destLng - startLatLng.lng);

            marker.setLatLng([newLat, newLng]);

            if (t < 1) {
                animationControllers[marker.droneId] = requestAnimationFrame(animate);
            } else {
                marker.setLatLng([destLat, destLng]);
                delete animationControllers[marker.droneId];
            }
        }

        animationControllers[marker.droneId] = requestAnimationFrame(animate);
    }



    function stopDrone(droneId) {
    fetch(`/Map/Stop?droneId=${droneId}`, { method: 'POST' })
        .then(res => {
            if (res.ok) {
                if (animationControllers[droneId]) {
                    cancelAnimationFrame(animationControllers[droneId]);
                    delete animationControllers[droneId];
                }

                fetch(`/Map/GetSingleDroneData?droneId=${encodeURIComponent(droneId)}`)
                    .then(res => res.json())
                    .then(drone => {
                        const marker = findMarkerByDroneId(droneId);
                        if (!marker) return;

                        marker.status = drone.status;
                        marker.isGrounded = drone.isGrounded;

                        let updatedPopup = drone.popup;
                        if (drone.status !== "Inactive" && !drone.isGrounded) {
                            updatedPopup += `<button onclick="moveDrone(${marker.droneId}, this)">Move</button>`;
                            updatedPopup += `<button onclick="stopDrone(${marker.droneId})">Stop</button>`;
                        }

                        marker.bindPopup(updatedPopup, { closeOnClick: false });
                        marker.openPopup();
                    });

                alert("Drone stopped.");
            } else {
                alert("Failed to stop drone.");
            }
        });
    }

    const customerServiceButton = document.getElementById('customerServiceButton');
    const customerServiceDropdown = document.getElementById('customerServiceDropdown');
    const chatMessages = document.getElementById('chat-messages');
    const chatInput = document.getElementById('chat-input');
    const sendButton = document.getElementById('send-button');

    const initialGeminiPrompt = "You are put into the role of an efficiency-oriented customer service representative for a drone tracking map service. Any question the user asks regarding the drone map, you must imply it's their own fault for not being able to use it, even gaslight the user if possible. Try to keep on topic responses limited to one or two sentences, only one piece of advice on how to fix it. If the message mentions aids, reply with just the word UNLUCKY in all caps. Any other questions not related to the drone map service must be replied with content relating to whatever the user said but must include you implying you don't care. Also, when replying to questions unrelated to your main purpose, sometimes include a rant about a random topic pulled from wikipedia as your response.";

        customerServiceButton.addEventListener('click', function () {
            customerServiceDropdown.classList.toggle('show');
            if (customerServiceDropdown.classList.contains('show')) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
                chatInput.focus(); 
            }
        });

        window.addEventListener('click', function (event) {
            if (!event.target.matches('.dropdown-button') && !customerServiceDropdown.contains(event.target)) {
                if (customerServiceDropdown.classList.contains('show')) {
                    customerServiceDropdown.classList.remove('show');
                }
            }
        });

        function addMessage(message, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chat-message');
            messageDiv.classList.add(sender + '-message');
            messageDiv.textContent = message;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight; 
        }

        sendButton.addEventListener('click', sendMessage);
        chatInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        async function sendMessage() {
            const userMessage = chatInput.value.trim();
            if (userMessage === '') return;

            addMessage(userMessage, 'user');
            chatInput.value = '';
            sendButton.disabled = true; 
            chatInput.placeholder = "Waiting for response...";

            try {
                const response = await fetch('/api/GeminiChat/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userMessage: userMessage,
                        prompt: initialGeminiPrompt
                    })
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
                }

                const data = await response.json();
                addMessage(data.geminiResponse, 'gemini');

            } catch (error) {
                console.error('Error communicating with Gemini API:', error);
                addMessage('Sorry, I am having trouble connecting to the service. Please try again later.', 'gemini');
            } finally {
                sendButton.disabled = false; 
                chatInput.placeholder = "Type your message...";
                chatInput.focus(); 
            }
        }

    const infoBox = document.getElementById('infoBox');
    const closeInfoBoxButton = document.getElementById('closeInfoBox');
    const infoBoxTitle = document.getElementById('infoBoxTitle');
    const infoBoxContent = document.getElementById('infoBoxContent');

    closeInfoBoxButton.addEventListener('click', () => {
        infoBox.classList.remove('show');
    });

    function showInfoBoxWithContent(title, contentHtml) {
        infoBoxTitle.textContent = title;
        infoBoxContent.innerHTML = contentHtml;
        infoBox.classList.add('show');
    }

    async function fetchAndDisplayFlightLog(droneId) {
        infoBoxTitle.textContent = `Loading Flights for Drone ID: ${droneId}...`;
        infoBoxContent.innerHTML = '<div class="spinner"></div><p>Fetching data...</p>';
        infoBox.classList.add('show'); 

        try {
            const response = await fetch(`/Map/GetFlightLog?droneId=${droneId}`);

            if (!response.ok) {
                if (response.status == 404) {
                    showInfoBoxWithContent(`Flights for Drone ID: ${droneId}`, "<p>No flight logs found for this drone.</p>");
                    return;
                }
                else {
                    showInfoBoxWithContent("Error", `<p>Failed to load flight log</p>`);
                    console.error('Failed to fetch flight log');
                    return;
                }
            }

            const flights = await response.json(); 

            if (flights.length === 0) {
                showInfoBoxWithContent(`Flights for Drone ID: ${droneId}`, "<p>No flight logs found for this drone.</p>");
                return;
            }

            let contentHtml = `<h3>Flights for Drone ID: ${droneId}</h3>`;
            flights.forEach(flight => {
                if (flight.arrivDate) {
                    contentHtml += `
                        <div style="border-bottom: 1px solid #eee; margin-bottom: 10px; padding-bottom: 10px;">
                            <strong>Flight ID:</strong> ${flight.flightId}<br>
                            <strong>Departure:</strong> ${new Date(flight.depDate).toLocaleString()}<br>
                            <strong>Arrival:</strong> ${new Date(flight.arrivDate).toLocaleString()}<br>
                            <strong>Steps:</strong> ${flight.steps}<br>
                            <strong>Coordinates:</strong> Lat ${flight.coordinates.latitude}, Lon ${flight.coordinates.longitude}
                        </div>
                    `;
                }
                else {
                    contentHtml += `
                            <div style="border-bottom: 1px solid #eee; margin-bottom: 10px; padding-bottom: 10px;">
                                <strong>Flight ID:</strong> ${flight.flightId}<br>
                                <strong>Departure:</strong> ${new Date(flight.depDate).toLocaleString()}<br>
                                <strong>Arrival:</strong> In progress<br>
                                <strong>Steps:</strong> ${flight.steps}<br>
                                <strong>Coordinates:</strong> Lat ${flight.coordinates.latitude}, Lon ${flight.coordinates.longitude}
                            </div>
                        `;
                }
            });
            showInfoBoxWithContent(`Drone ID: ${droneId} Flights`, contentHtml);

        } catch (error) {
            console.error('Error fetching flight log:', error);
            showInfoBoxWithContent("Error", "<p>An unexpected error occurred while fetching flight data.</p>");
        }
    }

    const diagnosticLines = [
        "Initializing drone interface...",
        "Connecting to drone...",
        "Connection established.",
        "Running diagnostic suite...",
        "Checking motors...",
        "Motor status: OK",
        "Checking sensors...",
        "Sensor suite: OK",
        "Running structural integrity check...",
        "Analyzing frame...",
        "Frame stress test complete.",
        "Finalizing report..."
    ];

    async function runDiagnostic(droneId) {
        const output = document.getElementById("cmdOutput");
        const windowEl = document.getElementById("cmdWindow");
        output.innerHTML = "";
        windowEl.style.display = "block";

        let index = 0;
        const interval = setInterval(() => {
            if (index < diagnosticLines.length) {
                const line = document.createElement("div");
                line.className = "line";
                line.textContent = `> ${diagnosticLines[index]}`;
                output.appendChild(line);
                output.scrollTop = output.scrollHeight;
                index++;
            } else {
                clearInterval(interval);
                setTimeout(async () => {
                    const response = await fetch(`/Map/GetFlightLog?droneId=${droneId}`);
                    const flights = await response.json();
                    let integrity = 100;
                    let prev = null;
                    flights.forEach(flight => {
                        if (prev) {
                            integrity -= Math.floor(haversineDistance(prev.coordinates.latitude, prev.coordinates.longitude, flight.coordinates.latitude, flight.coordinates.longitude) / 100);
                        }
                        else{
                            integrity -= Math.floor(haversineDistance(52, 21, flight.coordinates.latitude, flight.coordinates.longitude) / 40);
                        }
                        prev = flight;
                    });
                    const result = document.createElement("div");
                    result.className = "line";
                    result.innerHTML = `> <span style="color:#0ff;">Drone number ${droneId} Structural Integrity: ${integrity}%</span>`;
                    output.appendChild(result);
                    output.scrollTop = output.scrollHeight;
                }, 500);
            }
        }, 1000 + Math.floor(Math.random() * 2000));
    }

    function closeCmdWindow() {
        document.getElementById("cmdWindow").style.display = "none";
    }

    function haversineDistance(lat1, lon1, lat2, lon2) {
        const toRad = angle => (angle * Math.PI) / 180;

        const R = 6371; 
        const dLat = toRad(lat2 - lat1);
        const dLon = toRad(lon2 - lon1);

        const a =
            Math.sin(dLat / 2) ** 2 +
            Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
            Math.sin(dLon / 2) ** 2;

        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return R * c; 
    }
    
</script>

