@{
    ViewData["Title"] = "Map";
}


<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<style>

    #map-container { /* New container for map and controls */
        display: flex;
        width: 100%; /* Take full width */
    }

    #map {
        height: 600px;
        width: 75%; /* Adjust width as needed, e.g., 75% for map */
        z-index: 1;
        position: relative;
    }

    #sidebar {
        width: 25%; /* Adjust width as needed, e.g., 25% for sidebar */
        padding: 20px;
        box-sizing: border-box;
        background-color: #e8f5e9;
        border-left: 1px solid #eee;
        display: flex;
        flex-direction: column;
        gap: 15px; /* Spacing between elements */
    }

    /* Existing loading overlay styles */
    #loadingOverlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        z-index: 9999;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        font-size: 18px;
        font-family: sans-serif;
    }

    .spinner {
        border: 6px solid #f3f3f3;
        border-top: 6px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-bottom: 10px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Customer Service Dropdown Styles */
    .dropdown {
        position: relative;
        display: inline-block;
        width: 100%;
    }

    .dropdown-button {
        background-color: #4CAF50; /* Green */
        color: white;
        padding: 12px;
        font-size: 16px;
        border: none;
        cursor: pointer;
        width: 100%;
        text-align: left;
        border-radius: 4px;
    }

    .dropdown-content {
        display: none;
        position: absolute;
        background-color: #e5ccff;
        min-width: 300px; /* Adjust width as needed */
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1000; /* Higher than map, lower than loading overlay */
        border-radius: 4px;
        padding: 10px;
        right: 0; /* Position to the right if in a sidebar */
        top: 100%; /* Below the button */
    }

        .dropdown-content.show {
            display: block;
        }

    /* Chatbox Styles */
    #gemini-chatbox {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        background-color: white;
        display: flex;
        flex-direction: column;
        height: 400px; /* Fixed height for chat scroll */
        overflow: hidden;
    }

    #chat-messages {
        flex-grow: 1;
        overflow-y: auto; /* Scrollable message area */
        padding-right: 5px;
        margin-bottom: 10px;
    }

    .chat-message {
        margin-bottom: 8px;
        padding: 8px 12px;
        border-radius: 15px;
        max-width: 80%;
        word-wrap: break-word;
    }

    .user-message {
        background-color: #e0f7fa; /* Light blue */
        align-self: flex-end; /* Align to the right */
        margin-left: auto; /* Push to the right */
    }

    .gemini-message {
        background-color: #f1f8e9; /* Light green */
        align-self: flex-start; /* Align to the left */
        margin-right: auto; /* Push to the left */
    }

    #chat-input-container {
        display: flex;
        border-top: 1px solid #eee;
        padding-top: 10px;
    }

    #chat-input {
        flex-grow: 1;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin-right: 5px;
    }

    #send-button {
        background-color: #007bff; /* Blue */
        color: white;
        padding: 8px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

        #send-button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

</style>

<h2>Interactive Drone Map</h2>

<div id="map-container">
    <div id="loadingOverlay">
        <div class="spinner"></div>
        <p>Loading map data...</p>
    </div>

    <div id="map"></div>

    <div id="sidebar">
        <div class="dropdown">
            <button class="dropdown-button" id="customerServiceButton">Customer Service</button>
            <div class="dropdown-content" id="customerServiceDropdown">
                <div id="gemini-chatbox">
                    <div id="chat-messages">
                        <div class="chat-message gemini-message">Hello! How can I assist you with the drone map today?</div>
                    </div>
                    <div id="chat-input-container">
                        <input type="text" id="chat-input" placeholder="Type your message..." />
                        <button id="send-button">Send</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="~/js/map-config.js"></script>

<script>
    const openWeatherApiKey = '@ViewBag.OpenWeatherApiKey';
</script>

<script>
    let isLoading = true;

    const droneMarkers = [];
    const animationControllers = {};

    let animArray = [];

    window.onload = async function () {

        const map = L.map('map', {
            maxBounds: [
                [48.5, 14.0],   
                [55.5, 24.2]    
            ],
            maxBoundsViscosity: 1.0
        }).setView([52.237, 21.017], 6);
        map.setMinZoom(6);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        await Promise.all([
            DrawDistricts(0, map),
            DrawDrones(0, map)
        ]);

        animArray = droneMarkers.filter(drone => drone.status === "Busy");

        await animArray.forEach(droneMarker => {
            fetch(`/Map/getFlightData?droneId=${encodeURIComponent(droneMarker.droneId)}`)
                .then(response => {
                    if (!response.ok && response.status != 404) {
                        console.log(response)
                        throw new Error("Invalid flight data response");
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data || !data.coordinates) {
                        return;
                    }
                    console.log(data.steps);
                    animateMarkerSmooth(
                        droneMarker,
                        data.coordinates.latitude,
                        data.coordinates.longitude,
                        data.steps
                    );
                })
                .catch(err => {
                    console.error("Flight fetch failed:", err);
                });
        });

        document.getElementById('loadingOverlay').style.display = 'none';
    }

    

    async function DrawDrones(load = 1, map) {
        if (load === 1) { document.getElementById('loadingOverlay').style.display = 'flex'; }
        droneMarkers.forEach(m => map.removeLayer(m));
        droneMarkers.length = 0;
        return fetch('/Map/GetDroneData')
            .then(res => res.json())
            .then(data => {
                data.markers.forEach(marker => {
                    const icon = marker.isGrounded ? groundedDroneIcon : droneIcon;
                    marker.popup += `<button onclick="moveDrone(${marker.droneId}, this)">Move</button><button onclick="stopDrone(${marker.droneId})">Stop</button>`;

                    const droneMarker = L.marker([marker.lat, marker.lng], {
                        icon: icon
                    }).addTo(map)
                        .bindPopup(marker.popup, { closeOnClick: false });
                    droneMarker.isGrounded = marker.isGrounded;
                    droneMarker.droneId = marker.droneId;
                    droneMarker.status = marker.status;
                    droneMarker.originalPopup = marker.popup;
                    droneMarkers.push(droneMarker);
                });
            });
        if (load === 1) {
            document.getElementById('loadingOverlay').style.display = 'none'
        }
    }

    function stringToColor(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        const color = '#' + ((hash >> 24 & 0xFF).toString(16) +
            (hash >> 16 & 0xFF).toString(16) +
            (hash >> 8 & 0xFF).toString(16)).padEnd(6, '0');
        return color.slice(0, 7);
    }


    async function DrawDistricts(load = 1, map) {
        if (load === 1) { document.getElementById('loadingOverlay').style.display = 'flex'; }
        return fetch('/Map/GetDistrictData')
            .then(res => res.json())
            .then(data => {
                data.forEach(district => {
                    const polygon = L.polygon(district.boundaries, {
                        color: stringToColor(district.name),
                        fillColor: stringToColor(district.name),
                        fillOpacity: 0.1,
                        weight: 2
                    }).addTo(map);

                    polygon.bindPopup(`<strong>District:</strong> ${district.name}`);
                });
            });
        if (load === 1) {
            document.getElementById('loadingOverlay').style.display = 'none'
        }
    }

    function showMoveForm(droneId) {
        const marker = findMarkerByDroneId(droneId);
        if (!marker) return;

        const popup = marker.getPopup();
        if (!popup) return;

        const container = document.createElement('div');
        container.innerHTML = `
        <form onsubmit="submitMove(event, ${droneId})" onclick="event.stopPropagation()" onmousedown="event.stopPropagation()">
            <label>Lat: <input type="number" step="any" name="lat" required></label><br>
            <label>Lng: <input type="number" step="any" name="lng" required></label><br>
            <button type="submit">Submit</button>
            <button type="button" onclick="restorePopup(${droneId})">Cancel</button>
        </form>
    `;

        popup.setContent(container);
        marker.openPopup();

        L.DomEvent.disableClickPropagation(container);
        L.DomEvent.disableScrollPropagation(container);
    }

    function moveDrone(droneId){
        const marker = findMarkerByDroneId(droneId);
        if (marker.status != 'Active') {
            alert("Drone cannot move. Reason: " + marker.status);
            return; 
        }
        console.log(marker.isGrounded);
        if (marker.isGrounded) { alert("Drone cannot move. Reason: Grounded"); return; }
        showMoveForm(droneId);
        marker.openPopup();
    }

    function findMarkerByDroneId(id) {
        return droneMarkers.find(m => m.droneId == id);
    }

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function restorePopup(droneId) {
        const marker = findMarkerByDroneId(droneId);
        marker.closePopup();
        await sleep(500);
        fetch(`/Map/GetSingleDroneData?droneId=${encodeURIComponent(droneId)}`)
            .then(res => res.json())
            .then(drone => {
                if (drone.status !== "Inactive" && !drone.isGrounded) {
                    drone.popup += `<button onclick="moveDrone(${marker.droneId}, this)">Move</button>`;
                    drone.popup += `<button onclick="stopDrone(${marker.droneId})">Stop</button>`;
                }
                marker.bindPopup(drone.popup, { closeOnClick: false });
    });

    }


    async function submitMove(event, droneId) {
        event.preventDefault();

        const form = event.target;
        const lat = form.lat.value;
        const lng = form.lng.value;

        fetch(`/Map/Move?droneId=${droneId}&latitude=${lat}&longitude=${lng}`, {
        method: 'POST'
        })
            .then(response => {
                if (response.ok) {
                    alert("Drone move sent.");
                    return restorePopup(droneId);
                } else {
                    alert("Failed to move drone.");
                }
            });


        console.log(droneId)
        setTimeout(() => {
            fetch(`/Map/getFlightData?droneId=${encodeURIComponent(droneId)} `)
                .then(response => {
                    if (!response.ok) {
                        throw new Error("Invalid flight data response");
                    }
                    return response.json();
                })
                .then(data => {
                    if (!data || !data.coordinates) {
                        console.error("Missing flight data or coordinates");
                        return;
                    }
                    console.log(data);
                    droneMarker = findMarkerByDroneId(droneId);
                    animateMarkerSmooth(
                        droneMarker,
                        data.coordinates.latitude,
                        data.coordinates.longitude,
                        data.steps
                    );
                })
                .catch(err => {
                    console.error("Flight fetch failed:", err);
                });
        }, 1000)
        
        
        
    }

        function animateMarkerSmooth(marker, destLat, destLng, steps) {
        const duration = steps * 1000;
        const startLatLng = marker.getLatLng();
        const startTime = performance.now();

        
        if (animationControllers[marker.droneId]) {
            cancelAnimationFrame(animationControllers[marker.droneId]);
        }

        function animate(currentTime) {
            const elapsed = currentTime - startTime;
            const t = Math.min(elapsed / duration, 1);

            const newLat = startLatLng.lat + t * (destLat - startLatLng.lat);
            const newLng = startLatLng.lng + t * (destLng - startLatLng.lng);

            marker.setLatLng([newLat, newLng]);

            if (t < 1) {
                animationControllers[marker.droneId] = requestAnimationFrame(animate);
            } else {
                marker.setLatLng([destLat, destLng]);
                delete animationControllers[marker.droneId];
            }
        }

        animationControllers[marker.droneId] = requestAnimationFrame(animate);
    }



    function stopDrone(droneId) {
    fetch(`/Map/Stop?droneId=${droneId}`, { method: 'POST' })
        .then(res => {
            if (res.ok) {
                if (animationControllers[droneId]) {
                    cancelAnimationFrame(animationControllers[droneId]);
                    delete animationControllers[droneId];
                }

                // Pobierz i zaktualizuj dane drona
                fetch(`/Map/GetSingleDroneData?droneId=${encodeURIComponent(droneId)}`)
                    .then(res => res.json())
                    .then(drone => {
                        const marker = findMarkerByDroneId(droneId);
                        if (!marker) return;

                        marker.status = drone.status;
                        marker.isGrounded = drone.isGrounded;

                        let updatedPopup = drone.popup;
                        if (drone.status !== "Inactive" && !drone.isGrounded) {
                            updatedPopup += `<button onclick="moveDrone(${marker.droneId}, this)">Move</button>`;
                            updatedPopup += `<button onclick="stopDrone(${marker.droneId})">Stop</button>`;
                        }

                        marker.bindPopup(updatedPopup, { closeOnClick: false });
                        marker.openPopup();
                    });

                alert("Drone stopped.");
            } else {
                alert("Failed to stop drone.");
            }
        });
    }

        const customerServiceButton = document.getElementById('customerServiceButton');
        const customerServiceDropdown = document.getElementById('customerServiceDropdown');
        const chatMessages = document.getElementById('chat-messages');
        const chatInput = document.getElementById('chat-input');
        const sendButton = document.getElementById('send-button');

    const initialGeminiPrompt = "You are put into the role of an efficiency-oriented customer service representative for a drone tracking map service. Any question the user asks regarding the drone map, you must imply it's their own fault for not being able to use it, even gaslight the user if possible. Try to keep on topic responses limited to one or two sentences, only one piece of advice on how to fix it. If the message mentions aids, reply with just the word UNLUCKY in all caps. Any other questions not related to the drone map service must be replied with content relating to whatever the user said but must include you implying you don't care or aren't paid enough to care. Also, sometimes include a rant about a random topic pulled from wikipedia as your response.";

        customerServiceButton.addEventListener('click', function () {
            customerServiceDropdown.classList.toggle('show');
            if (customerServiceDropdown.classList.contains('show')) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
                chatInput.focus(); 
            }
        });

        window.addEventListener('click', function (event) {
            if (!event.target.matches('.dropdown-button') && !customerServiceDropdown.contains(event.target)) {
                if (customerServiceDropdown.classList.contains('show')) {
                    customerServiceDropdown.classList.remove('show');
                }
            }
        });

        function addMessage(message, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chat-message');
            messageDiv.classList.add(sender + '-message');
            messageDiv.textContent = message;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight; 
        }

        sendButton.addEventListener('click', sendMessage);
        chatInput.addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        async function sendMessage() {
            const userMessage = chatInput.value.trim();
            if (userMessage === '') return;

            addMessage(userMessage, 'user');
            chatInput.value = '';
            sendButton.disabled = true; 
            chatInput.placeholder = "Waiting for response...";

            try {
                const response = await fetch('/api/GeminiChat/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        userMessage: userMessage,
                        prompt: initialGeminiPrompt
                    })
                });

                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
                }

                const data = await response.json();
                addMessage(data.geminiResponse, 'gemini');

            } catch (error) {
                console.error('Error communicating with Gemini API:', error);
                addMessage('Sorry, I am having trouble connecting to the service. Please try again later.', 'gemini');
            } finally {
                sendButton.disabled = false; 
                chatInput.placeholder = "Type your message...";
                chatInput.focus(); 
            }
        }
        




    
</script>

