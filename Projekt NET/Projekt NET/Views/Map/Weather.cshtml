@{
    ViewData["Title"] = "Map";
}

<h2>Interactive Drone Map</h2>

<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<style>
    #map {
        height: 600px;
        width: 100%;
    }
</style>

<div id="map"></div>

<script src="~/js/map-config.js"></script>

<script>
    const map = L.map('map', {
        maxBounds: [
            [49.0, 14.0],
            [55.0, 24.2]
        ],
        maxBoundsViscosity: 1.0
    }).setView([52.237, 21.017], 6);
    map.setMinZoom(7);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    L.tileLayer(`https://tile.openweathermap.org/map/wind_new/{z}/{x}/{y}.png?appid=699ba7263a2d7855c6b6d78c13f2c076`, {
        attribution: '&copy; OpenWeatherMap',
        opacity: 1
    }).addTo(map);

    L.tileLayer(`https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=699ba7263a2d7855c6b6d78c13f2c076`, {
        attribution: '&copy; OpenWeatherMap',
        opacity: 1
    }).addTo(map);

    fetch('/Map/GetDroneData')
        .then(res => res.json())
        .then(data => {
            data.markers.forEach(marker => {
                L.marker([marker.lat, marker.lng], {
                    icon: droneIcon
                }).addTo(map)
                    .bindPopup(marker.popup);
            });
        });

    function stringToColor(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        const color = '#' + ((hash >> 24 & 0xFF).toString(16) +
            (hash >> 16 & 0xFF).toString(16) +
            (hash >> 8 & 0xFF).toString(16)).padEnd(6, '0');
        return color.slice(0, 7);
    }
    

    

</script>
