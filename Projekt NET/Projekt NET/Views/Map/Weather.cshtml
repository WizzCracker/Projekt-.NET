@{
    ViewData["Title"] = "Map";
}

<h2>Interactive Drone Map</h2>

<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<style>
    #map {
        position: relative; 
        height: 600px;
        width: 100%;
    }

    .layer-controls {
        position: absolute;
        top: 20px;
        right: 20px;
        background: rgba(255, 255, 255, 0.9);
        padding: 10px;
        border-radius: 8px;
        font-family: sans-serif;
        z-index: 1000;
    }

        .layer-controls label {
            display: block;
            margin-bottom: 5px;
        }
</style>

<div id="map">
    <div class="layer-controls">
        <label>
            <input type="checkbox" id="windCheckbox" checked>
            Wind Layer
        </label>
        <label>
            <input type="checkbox" id="precCheckbox" checked>
            Precipitation Layer
        </label>
    </div>
</div>



<script src="~/js/map-config.js"></script>

<script>
    const openWeatherApiKey = '@ViewBag.OpenWeatherApiKey';
</script>

<script>
    const map = L.map('map', {
        maxBounds: [
            [49.0, 14.0],
            [55.0, 24.2]
        ],
        maxBoundsViscosity: 0.7
    }).setView([52.237, 21.017], 6);
    map.setMinZoom(6);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    var windLayer = L.tileLayer(`https://tile.openweathermap.org/map/wind_new/{z}/{x}/{y}.png?appid=${openWeatherApiKey}`, {
        attribution: '&copy; OpenWeatherMap',
        opacity: 1
    }).addTo(map);

    var precLayer = L.tileLayer(`https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=${openWeatherApiKey}`, {
        attribution: '&copy; OpenWeatherMap',
        opacity: 1
    }).addTo(map);

    document.getElementById('windCheckbox').addEventListener('change', function () {
        this.checked ? windLayer.addTo(map) : map.removeLayer(windLayer);
    });

    document.getElementById('precCheckbox').addEventListener('change', function () {
        this.checked ? precLayer.addTo(map) : map.removeLayer(precLayer);
    });

    fetch('/Map/GetDroneData')
        .then(res => res.json())
        .then(data => {
            data.markers.forEach(marker => {
                L.marker([marker.lat, marker.lng], {
                    icon: droneIcon
                }).addTo(map)
                    .bindPopup(marker.popup);
            });
        });

    function stringToColor(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
        }
        const color = '#' + ((hash >> 24 & 0xFF).toString(16) +
            (hash >> 16 & 0xFF).toString(16) +
            (hash >> 8 & 0xFF).toString(16)).padEnd(6, '0');
        return color.slice(0, 7);
    }
    

    

</script>
